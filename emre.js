'use strict';

const { v4: uuidv4 } = require('uuid')

module.exports = ( (collectionData)=> {

    let fileContent = collectionData;
    const Orderguids = [...fileContent.matchAll(/HeaderSet\(guid'(?<guid>[a-fA-F0-9\-]+)'\)/gi)].map(a=>a.groups.guid).sort();
    const uniqueOrderguids = Orderguids.filter((i,idx) => Orderguids[idx-1] !== i);
    uniqueOrderguids.forEach(guid=>fileContent = fileContent.replace(new RegExp(guid,"gi"), '{{Orderguid}}'));
    const collection = JSON.parse(fileContent);
    uniqueOrderguids
    const items = collection.item;
    const newCollection = {
    ...collection,
    info: {
        ...collection.info,
        name: "aaautogenerated_" + collection.collection.info.name,
    },
    item: [getXCSRFRequest(collection.collection.item[0])].concat(
        collection.collection.item
        .map(function (oItem) {
            const path = oItem.request.url.path.filter(Boolean);
            return {
            name: path[path.length - 1],
            request: {
                method: oItem.request.method,
                header: getNewHeaders(oItem.request.header),
                body: oItem.request.body,
                url: {
                host: ["{{Base-Url}}"],
                path: path,
                query: oItem.request.url.query,
                },
            },
            };
        })
        .filter(not(byKey("name", "$batch")))
        .slice(0,25)
    ),
    };

    return newCollection ;

    function getNewHeaders(oldHeaders) {
    return [
        { "key": "sap-contextid-accept", "value": "header", "type": "text" },
        { "key": "X-CSRF-Token", "value": "{{X-CSRF-Token}}", "type": "text" },
        { "key": "Accept-Language", "value": "en", "type": "text" },
        { "key": "sap-contextid", "value": "{{sap-contextid}}", "type": "text" },
    ].concat(oldHeaders.filter(byKeys("key", ["sap-terminate","Content-Type","Accept"])));
    }
    function not(fn) {
    return function (oItem) {
        return !fn(oItem);
    };
    }
    function byKey(name, value) {
    return function (oItem) {
        return oItem[name] === value;
    };
    }
    function byKeys(name, values) {
    return function (oItem) {
        return values.includes(oItem[name]);
    };
    }
    function createGuid() {
    return uuidv4();
    }
    function getXCSRFRequest(oHeader) {
    return {
        name: "Get CSRF Token",
        event: [
        {
            listen: "test",
            script: {
            id: createGuid(),
            exec: [
                'var csrfToken = pm.response.headers.get("x-csrf-token");',
                'var contextId = pm.response.headers.get("sap-contextid");',
                "",
                "",
                'pm.environment.set("X-CSRF-Token", csrfToken);',
                'pm.environment.set("sap-contextid", contextId);',
                "",
                "console.log({csrfToken, contextId});",
            ],
            type: "text/javascript",
            },
        },
        {
            listen: "prerequest",
            script: {
            id: createGuid(),
            exec: [
                "pm.cookies.clear();",
                "console.log({",
                '    username: pm.environment.get("username"),',
                "})",
            ],
            type: "text/javascript",
            },
        },
        ],
        request: {
        method: "GET",
        header: [
            {
            key: "sap-contextid-accept",
            value: "header",
            type: "text",
            },
            {
            key: "X-CSRF-Token",
            value: "Fetch",
            type: "text",
            },
            {
            key: "sap-contextid",
            value: "{{sap-contextid}}",
            type: "text",
            },
            {
            key: "sap-client",
            value: "300",
            type: "text",
            },
            {
            key: "sap-language",
            value: "EN",
            type: "text",
            },
        ],
        url: {
            host: ["{{Base-Url}}"],
            path: oHeader.request.url.path.slice(0, 5).concat("$metadata"),
        },
        },
        response: [],
    };
    }

});